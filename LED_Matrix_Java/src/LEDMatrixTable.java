// Table with each character available in the LED Matrix format

public class LEDMatrixTable {
	// LED Matrix dimensions: 8 (width) x 8 (height) LEDs 
	// LED Matrix character format: element 0 is the ASCII decimal; elements 1 to 8 corresponds to each row in the LED matrix; each digit in elements 1 to 8 corresponds to each LED being turned ON (1) or OFF (0))
	// LED Matrix character format: Each 8 digits after the "0b" (binary literal) are the 8 column values of each row / Left to Right / Up to Down
	private final static int[][] LEDMatrix_Table = {
	{0,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000},
	{65,0b00000000,0b00111100,0b01000010,0b01000010,0b01111110,0b01000010,0b01000010,0b00000000},
	{66,0b00000000,0b01111100,0b01000010,0b01111100,0b01000010,0b01000010,0b01111100,0b00000000},
	{67,0b00000000,0b00111100,0b01000010,0b01000000,0b01000000,0b01000010,0b00111100,0b00000000},
	{68,0b00000000,0b01111000,0b01000100,0b01000010,0b01000010,0b01000100,0b01111000,0b00000000},
	{69,0b00000000,0b01111110,0b01000000,0b01111110,0b01000000,0b01000000,0b01111110,0b00000000},
	{70,0b00000000,0b01111110,0b01000000,0b01111100,0b01000000,0b01000000,0b01000000,0b00000000},
	{71,0b00000000,0b00111100,0b01000000,0b01001100,0b01000010,0b01000010,0b00111100,0b00000000},
	{72,0b00000000,0b01000010,0b01000010,0b01111110,0b01000010,0b01000010,0b01000010,0b00000000},
	{73,0b00000000,0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00000000},
	{74,0b00000000,0b01111110,0b00001000,0b00001000,0b00001000,0b01001000,0b00111000,0b00000000},
	{75,0b00000000,0b01000100,0b01001000,0b01110000,0b01010000,0b01001000,0b01000100,0b00000000},
	{76,0b00000000,0b00100000,0b00100000,0b00100000,0b00100000,0b00100000,0b00111110,0b00000000},
	{77,0b00000000,0b01000010,0b01100110,0b01011010,0b01000010,0b01000010,0b01000010,0b00000000},
	{78,0b00000000,0b01000010,0b01100010,0b01010010,0b01001010,0b01000110,0b01000010,0b00000000},
	{79,0b00000000,0b00111100,0b01000010,0b01000010,0b01000010,0b01000010,0b00111100,0b00000000},
	{80,0b00000000,0b01111100,0b01000010,0b01000010,0b01111100,0b01000000,0b01000000,0b00000000},
	{81,0b00000000,0b00111100,0b01000010,0b01000010,0b01010010,0b00111100,0b00001000,0b00000000},
	{82,0b00000000,0b01111100,0b01000010,0b01000010,0b01111100,0b01001000,0b01000100,0b00000000},
	{83,0b00000000,0b00111110,0b01000000,0b00111100,0b00000010,0b00000010,0b01111100,0b00000000},
	{84,0b00000000,0b01111110,0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00000000},
	{85,0b00000000,0b01000010,0b01000010,0b01000010,0b01000010,0b01000010,0b00111100,0b00000000},
	{86,0b00000000,0b00100010,0b00100010,0b00100010,0b00100010,0b00010100,0b00001000,0b00000000},
	{87,0b00000000,0b00100010,0b00101010,0b00101010,0b00101010,0b00101010,0b00010100,0b00000000},
	{88,0b00000000,0b00000000,0b01000100,0b00101000,0b00010000,0b00101000,0b01000100,0b00000000},
	{89,0b00000000,0b01000100,0b01000100,0b00101000,0b00010000,0b00010000,0b00010000,0b00000000},		{90,0b00000000,0b01111110,0b00000100,0b00001000,0b00010000,0b00100000,0b01111110,0b00000000}
	};

	
	// get the correspondent LM code for the letter
	public int[] get_char (int letter) {
		int[] lm_array = new int[8];
		// Loop through the LEDMatrix to find letter ASCII decimal
		for (int i = 0; i < LEDMatrix_Table.length; i++) {
			// If find it, populate the array to be returned with the 8 LED rows
			if(LEDMatrix_Table[i][0] == letter) {
				for(int j = 1; j <= 8; j++) {
					lm_array[j-1] = LEDMatrix_Table[i][j];
				}
				break;	// go out of the loop
			}
			// If don't find it, populate the array to be returned with the 8 LED rows of a null char
			else {
				for(int j = 1; j <= 8; j++) {
					lm_array[j-1] = LEDMatrix_Table[0][j];
				}
			}
		}
		return lm_array;	// return an array with the 8 LED rows
	}
	
	
	// print the correspondent LM code for the letter in the console (for debugging)
	public void print_char (int[] lm_array) {
		for (int i = 0; i < lm_array.length; i++) {
			System.out.println(String.format("%8s", Integer.toBinaryString(lm_array[i])).replace(' ', '0'));
		}
	}
	
	
	// convert a binary integer to a binary literal String with 8 digits
	public String binary8 (int binary) {
		return String.format("%8s", Integer.toBinaryString(binary)).replace(' ', '0');
	}
	
	
}
